name: Solar System Workflow

on:
    workflow_dispatch: 
    push:
        branches: 
            - main
            - 'feature/*'
env:
    MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
    MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
    MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
jobs:
    unit-testing:
        name: Unit Testing
        runs-on: ubuntu-latest
        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4

            - name: Setup NodeJS Version - 18
              uses: actions/setup-node@v3
              with:
                node-version: 18

            - name: Install Dependencies
              run: npm install

            - name: Unit Testing
              run: npm test
    
    docker:
        name: Continerization
        needs: [unit-testing]
        permissions: 
          packages: write
        runs-on: ubuntu-latest
        steps:
          - name: Checkout Repo
            uses: actions/checkout@v4

          - name: DockerHub Login
            uses: docker/login-action@v3
            with:
              username: ${{ vars.DOCKERHUB_USERNAME }}
              password: ${{ secrets.DOCKERHUB_TOKEN }}
          
          - name: GHCR Login
            uses: docker/login-action@v3
            with:
              registry: ghcr.io
              username: ${{ github.repository_owner }}
              password: ${{ secrets.GITHUB_TOKEN }}

          - name: Docker Build For Testing
            uses: docker/build-push-action@v6
            with:
              context: .
              push: false
              tags: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

          - name: Docker Image Testing
            run: |
              docker images
              docker run --name solar-system-app -d \
                -p 3000:3000 \
                -e MONGO_URI=MONGO_URI \
                -e MONGO_USERNAME=MONGO_USERNAME \
                -e MONGO_PASSWORD=MONGO_PASSWORD \
                ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

              export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
              echo $IP

              echo Testing Image URL using wget 
              wget -q -O - 127.0.0.1:3000/live | grep live

          - name: Container Registry Push
            uses: docker/build-push-action@v6
            with:
              context: .
              push: true
              tags: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
            #  ghcr.io/${{ github.repository_owner }}/solar-system:${{ github.sha }}

    deploy-dev:
        runs-on: ubuntu-latest
        needs: [docker]
        steps:
          - name: Checkout Repo
            uses: actions/checkout@v4

          - name: Install kubectl CLI
            uses: azure/setup-kubectl@v3
              
          - name: Set Kubeconfig file
            uses: azure/k8s-set-context@v3
            with:
              method: kubeconfig
              kubeconfig: ${{ secrets.KUBECONFIG }}

          - name: Fetch Kubernetes Cluster Details
            run: |
              kubectl version
              echo ----------------------------------------
              kubectl get nodes

          - name: Save Nginx Ingress Controller IP as a GITHUB Environment Variable
            run: |
              echo "INGRESS_IP=$(kubectl -n ingress-nginx get services ingress-nginx-controller -o jsonpath="{.status.loadBalancer.ingress[0].ip}")" >> $GITHUB_ENV

          - name: Replace Token in Manifest files
            uses: cschleiden/replace-tokens@v1
            with:
              tokenPrefix: '_{_'
              tokenSuffix: '_}_'
              files: 'kubernetes/development/*.yaml"]'
            env:
              NAMESPACE: development
              REPLICAS: 2
              IMAGE: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
              INGRESS_IP:  ${{ env.INGRESS_IP }}

          - name: Check files
            run: |
              cat kubernetes/development/*.yaml

          - name: Create MongoDB Secret
            run: |
              kubectl -n development create secret generic mongo-db-creds \
              --from-literal=MONGO_URI=$MONGO_URI \
              --from-literal=MONGO_USERNAME=${{ vars.MONGO_USERNAME }} \
              --from-literal=MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }} \
              --save-config \
              --dry-run=client \
              -o yaml | kubectl apply -f -
            
          - name: Deploy to Dev Env
            run: |
              kubectl apply -f kubernetes/development